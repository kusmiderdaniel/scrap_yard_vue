{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'ReceiptsAcounting',\n  data() {\n    return {\n      dateFrom: '',\n      dateTo: '',\n      receipts: []\n    };\n  },\n  mounted() {\n    this.setWeekRange(), this.getReceipts();\n  },\n  computed: {\n    totalGrossAmount() {\n      let totalGrossAmount = 0;\n      for (let i = 0; i < this.receipts.length; i++) {\n        totalGrossAmount += Number(this.receipts[i].gross_amount);\n      }\n      return totalGrossAmount;\n    }\n  },\n  methods: {\n    getReceipts() {\n      axios.get('/api/v1/receipts/').then(response => {\n        for (let i = 0; i < response.data.length; i++) {\n          if (response.data[i].date >= this.dateFrom && response.data[i].date <= this.dateTo) {\n            this.receipts.push(response.data[i]);\n          }\n        }\n      }).catch(error => {\n        console.log(JSON.stringify(error));\n      });\n    },\n    formatDate(date) {\n      const options = {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    formatNumber(number) {\n      // Convert number to string and split it into integer and decimal parts\n      const parts = Number(number).toFixed(2).toString().split('.');\n      const integerPart = parts[0];\n      const decimalPart = parts[1];\n      // Insert space every three digits in the integer part\n      const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n      // Concatenate formatted integer part with decimal part and return\n      return `${formattedInteger},${decimalPart}`;\n    },\n    async dateChange() {\n      await this.getReceipts();\n    },\n    setWeekRange() {\n      const currentDate = new Date();\n      const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 2);\n      const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);\n\n      // Format dates as YYYY-MM-DD strings\n      const formattedFirstDay = firstDayOfMonth.toISOString().split('T')[0];\n      const formattedLastDay = lastDayOfMonth.toISOString().split('T')[0];\n\n      // Set the data properties\n      this.dateFrom = formattedFirstDay;\n      this.dateTo = formattedLastDay;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","dateFrom","dateTo","receipts","mounted","setWeekRange","getReceipts","computed","totalGrossAmount","i","length","Number","gross_amount","methods","get","then","response","date","push","catch","error","console","log","JSON","stringify","formatDate","options","day","month","year","Date","toLocaleDateString","undefined","formatNumber","number","parts","toFixed","toString","split","integerPart","decimalPart","formattedInteger","replace","dateChange","currentDate","firstDayOfMonth","getFullYear","getMonth","lastDayOfMonth","formattedFirstDay","toISOString","formattedLastDay"],"sources":["/Users/danielkusmider/Library/CloudStorage/OneDrive-Personal/Docs/Projects/ScrapYard/scrap_yard_vue/src/views/dashboard/ReceiptsAcounting.vue"],"sourcesContent":["<template>\n    <div class=\"page-receipts\">\n        <nav class=\"breadcrumb\" aria-label=\"breadcrumbs\">\n            <ul>\n                <li><router-link to=\"/dashboard\">Dashboard</router-link></li>\n                <li><router-link to=\"/dashboard/receipts\">Kwity</router-link></li>\n                <li class=\"is-active\"><router-link to=\"/dashboard/receipts/accounting\" aria-current=\"true\">Zestawienie księgowe</router-link></li>\n            </ul>\n        </nav>\n\n        <div class=\"columns is-multiline\">\n            <div class=\"column is-12\">\n                <h1 class=\"title\">Kwity</h1>\n            </div>\n\n            <div class=\"column is-3\">\n                <div class=\"field\">\n                    <label class=\"label\">Zakres od:</label>\n\n                    <div class=\"control\">\n                        <input type=\"date\" name=\"receipt_date\" class=\"input\" v-model=\"dateFrom\" @change=\"dateChange\">\n                    </div>\n                </div>\n                <div class=\"field\">\n                    <label class=\"label\">Zakres do:</label>\n\n                    <div class=\"control\">\n                        <input type=\"date\" name=\"receipt_date\" class=\"input\" v-model=\"dateTo\" @change=\"dateChange\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"columns is-multiline\">\n            <div class=\"column is-4 table-container\">\n                <table class=\"table is-fullwidth\">\n                    <thead>\n                        <tr>\n                            <th style=\"width: 100px;\">Numer</th>\n                            <th class=\"has-text-centered\" style=\"width: 100px;\">Data</th>\n                            <th class=\"has-text-right\" style=\"width: 120px;\">Wartość</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        <tr\n                            v-for=\"receipt in receipts\"\n                            v-bind:key=\"receipt.id\"\n                        >\n                            <td>{{ receipt.receipt_number }}</td>\n                            <td class=\"has-text-centered\">{{ formatDate(receipt.date) }}</td>\n                            <td class=\"has-text-right\">{{ formatNumber(receipt.gross_amount) }} zł</td>\n                        </tr>\n                        <tr>\n                                <td><strong>Total</strong></td>\n                                <td></td>\n                                <td class=\"has-text-right\"><strong>{{ formatNumber(totalGrossAmount) }} zł</strong></td>\n                            </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n    name: 'ReceiptsAcounting',\n    data() {\n        return {\n            dateFrom: '',\n            dateTo: '',\n            receipts: []\n        }\n    },\n    mounted() {\n        this.setWeekRange(),\n        this.getReceipts()\n    },\n    computed: {\n        totalGrossAmount() {\n            let totalGrossAmount = 0\n            for (let i = 0;i < this.receipts.length; i++) {\n                totalGrossAmount += Number(this.receipts[i].gross_amount)\n            }\n            return totalGrossAmount\n        }\n    },\n    methods: {\n        getReceipts() {\n            axios\n                .get('/api/v1/receipts/')\n                .then(response => {\n                    for (let i = 0; i < response.data.length; i++) {\n                        if (response.data[i].date >= this.dateFrom && response.data[i].date <= this.dateTo) {\n                            this.receipts.push(response.data[i])\n                        }\n                    }\n                })\n                .catch(error => {\n                    console.log(JSON.stringify(error))\n                })\n        },\n        formatDate(date) {\n            const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n            return new Date(date).toLocaleDateString(undefined, options);\n        },\n        formatNumber(number) {\n            // Convert number to string and split it into integer and decimal parts\n            const parts = Number(number).toFixed(2).toString().split('.');\n            const integerPart = parts[0];\n            const decimalPart = parts[1];\n            // Insert space every three digits in the integer part\n            const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n            // Concatenate formatted integer part with decimal part and return\n            return `${formattedInteger},${decimalPart}`;\n        },\n        async dateChange() {\n            await this.getReceipts()\n        },\n        setWeekRange() {\n            const currentDate = new Date();\n            const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 2);\n            const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);\n            \n            // Format dates as YYYY-MM-DD strings\n            const formattedFirstDay = firstDayOfMonth.toISOString().split('T')[0];\n            const formattedLastDay = lastDayOfMonth.toISOString().split('T')[0];\n            \n            // Set the data properties\n            this.dateFrom = formattedFirstDay;\n            this.dateTo = formattedLastDay;\n        },\n    }\n}\n\n</script>"],"mappings":";AAkEA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACXC,IAAI,EAAE,mBAAmB;EACzBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE;IACd;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,YAAY,CAAC,CAAC,EACnB,IAAI,CAACC,WAAW,CAAC;EACrB,CAAC;EACDC,QAAQ,EAAE;IACNC,gBAAgBA,CAAA,EAAG;MACf,IAAIA,gBAAe,GAAI;MACvB,KAAK,IAAIC,CAAA,GAAI,CAAC,EAACA,CAAA,GAAI,IAAI,CAACN,QAAQ,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1CD,gBAAe,IAAKG,MAAM,CAAC,IAAI,CAACR,QAAQ,CAACM,CAAC,CAAC,CAACG,YAAY;MAC5D;MACA,OAAOJ,gBAAe;IAC1B;EACJ,CAAC;EACDK,OAAO,EAAE;IACLP,WAAWA,CAAA,EAAG;MACVR,KAAI,CACCgB,GAAG,CAAC,mBAAmB,EACvBC,IAAI,CAACC,QAAO,IAAK;QACd,KAAK,IAAIP,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIO,QAAQ,CAAChB,IAAI,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;UAC3C,IAAIO,QAAQ,CAAChB,IAAI,CAACS,CAAC,CAAC,CAACQ,IAAG,IAAK,IAAI,CAAChB,QAAO,IAAKe,QAAQ,CAAChB,IAAI,CAACS,CAAC,CAAC,CAACQ,IAAG,IAAK,IAAI,CAACf,MAAM,EAAE;YAChF,IAAI,CAACC,QAAQ,CAACe,IAAI,CAACF,QAAQ,CAAChB,IAAI,CAACS,CAAC,CAAC;UACvC;QACJ;MACJ,CAAC,EACAU,KAAK,CAACC,KAAI,IAAK;QACZC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC;MACrC,CAAC;IACT,CAAC;IACDK,UAAUA,CAACR,IAAI,EAAE;MACb,MAAMS,OAAM,GAAI;QAAEC,GAAG,EAAE,SAAS;QAAEC,KAAK,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAU,CAAC;MACrE,OAAO,IAAIC,IAAI,CAACb,IAAI,CAAC,CAACc,kBAAkB,CAACC,SAAS,EAAEN,OAAO,CAAC;IAChE,CAAC;IACDO,YAAYA,CAACC,MAAM,EAAE;MACjB;MACA,MAAMC,KAAI,GAAIxB,MAAM,CAACuB,MAAM,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;MAC7D,MAAMC,WAAU,GAAIJ,KAAK,CAAC,CAAC,CAAC;MAC5B,MAAMK,WAAU,GAAIL,KAAK,CAAC,CAAC,CAAC;MAC5B;MACA,MAAMM,gBAAe,GAAIF,WAAW,CAACG,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC;MAC1E;MACA,OAAQ,GAAED,gBAAiB,IAAGD,WAAY,EAAC;IAC/C,CAAC;IACD,MAAMG,UAAUA,CAAA,EAAG;MACf,MAAM,IAAI,CAACrC,WAAW,CAAC;IAC3B,CAAC;IACDD,YAAYA,CAAA,EAAG;MACX,MAAMuC,WAAU,GAAI,IAAId,IAAI,CAAC,CAAC;MAC9B,MAAMe,eAAc,GAAI,IAAIf,IAAI,CAACc,WAAW,CAACE,WAAW,CAAC,CAAC,EAAEF,WAAW,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;MACtF,MAAMC,cAAa,GAAI,IAAIlB,IAAI,CAACc,WAAW,CAACE,WAAW,CAAC,CAAC,EAAEF,WAAW,CAACG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;MAEzF;MACA,MAAME,iBAAgB,GAAIJ,eAAe,CAACK,WAAW,CAAC,CAAC,CAACZ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACrE,MAAMa,gBAAe,GAAIH,cAAc,CAACE,WAAW,CAAC,CAAC,CAACZ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;MAEnE;MACA,IAAI,CAACrC,QAAO,GAAIgD,iBAAiB;MACjC,IAAI,CAAC/C,MAAK,GAAIiD,gBAAgB;IAClC;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
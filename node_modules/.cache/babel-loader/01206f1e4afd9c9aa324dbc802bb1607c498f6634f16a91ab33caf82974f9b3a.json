{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { toast } from 'bulma-toast';\nimport StatsChart from '@/components/StatsChart.vue';\nexport default {\n  name: 'ItemStatistics',\n  data() {\n    return {\n      dateFrom: '',\n      dateTo: '',\n      receipt_items: [],\n      unique_items: [],\n      sortByColumn: null,\n      sortDirection: 'asc'\n    };\n  },\n  components: {\n    StatsChart\n  },\n  mounted() {\n    this.getReceiptItems(), this.setWeekRange(), this.sortBy('name');\n  },\n  computed: {\n    sortedItems() {\n      // Create a copy of the items array to avoid mutating the original data\n      let sortedItems = [...this.unique_items];\n\n      // Sort the items based on the selected column and direction\n      if (this.sortByColumn) {\n        sortedItems.sort((a, b) => {\n          const valA = a[this.sortByColumn];\n          const valB = b[this.sortByColumn];\n          if (valA < valB) return this.sortDirection === 'asc' ? -1 : 1;\n          if (valA > valB) return this.sortDirection === 'asc' ? 1 : -1;\n          return 0;\n        });\n      }\n      return sortedItems;\n    },\n    groupedItems() {\n      const groupedItemsMap = {};\n      this.sortedItems.forEach(item => {\n        const {\n          item_code\n        } = item;\n        if (!groupedItemsMap[item_code]) {\n          groupedItemsMap[item_code] = [];\n        }\n        groupedItemsMap[item_code].push(item);\n      });\n\n      // Convert object to array of grouped items\n      return Object.entries(groupedItemsMap).map(([itemCode, items]) => ({\n        item_code: itemCode,\n        items\n      }));\n    }\n  },\n  methods: {\n    getReceiptItems() {\n      axios.get('/api/v1/receipts/').then(response => {\n        console.log(response);\n        for (let i = 0; i < response.data.length; i++) {\n          if (response.data[i].date >= this.dateFrom && response.data[i].date <= this.dateTo) {\n            for (let x = 0; x < response.data[i].receipt_items.length; x++) {\n              this.receipt_items.push(response.data[i].receipt_items[x]);\n            }\n          }\n        }\n        this.calculateItems();\n      }).catch(error => {\n        console.log(JSON.stringify(error));\n      });\n    },\n    calculateItems() {\n      // Initialize an object to store unique items\n      const uniqueItemsMap = {};\n      this.receipt_items.forEach(item => {\n        const {\n          source_id,\n          name,\n          item_code,\n          quantity,\n          gross_amount\n        } = item;\n\n        // Convert gross_amount to a number\n        const grossAmountNumber = parseFloat(gross_amount);\n        if (uniqueItemsMap[source_id]) {\n          // If item exists, update quantity and gross_value\n          uniqueItemsMap[source_id].name = name;\n          uniqueItemsMap[source_id].item_code = item_code;\n          uniqueItemsMap[source_id].quantity += quantity;\n          uniqueItemsMap[source_id].gross_amount += grossAmountNumber;\n        } else {\n          // If item does not exist, create new entry\n          uniqueItemsMap[source_id] = {\n            source_id,\n            name,\n            item_code,\n            quantity,\n            gross_amount: grossAmountNumber\n          };\n        }\n      });\n\n      // Convert object to array of unique items\n      this.unique_items = Object.values(uniqueItemsMap);\n    },\n    async dateChange() {\n      await this.getReceiptItems();\n      await this.calculateItems;\n    },\n    setWeekRange() {\n      const currentDate = new Date();\n      const firstDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 1));\n      const lastDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 7));\n\n      // Format dates as YYYY-MM-DD strings\n      const formattedFirstDay = firstDayOfWeek.toISOString().split('T')[0];\n      const formattedLastDay = lastDayOfWeek.toISOString().split('T')[0];\n\n      // Set the data properties\n      this.dateFrom = formattedFirstDay;\n      this.dateTo = formattedLastDay;\n    },\n    sortBy(column) {\n      // Toggle sort direction if the same column header is clicked\n      if (this.sortByColumn === column) {\n        this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n      } else {\n        // Otherwise, set the column to sort by and reset sort direction\n        this.sortByColumn = column;\n        this.sortDirection = 'asc';\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","toast","StatsChart","name","data","dateFrom","dateTo","receipt_items","unique_items","sortByColumn","sortDirection","components","mounted","getReceiptItems","setWeekRange","sortBy","computed","sortedItems","sort","a","b","valA","valB","groupedItems","groupedItemsMap","forEach","item","item_code","push","Object","entries","map","itemCode","items","methods","get","then","response","console","log","i","length","date","x","calculateItems","catch","error","JSON","stringify","uniqueItemsMap","source_id","quantity","gross_amount","grossAmountNumber","parseFloat","values","dateChange","currentDate","Date","firstDayOfWeek","setDate","getDate","getDay","lastDayOfWeek","formattedFirstDay","toISOString","split","formattedLastDay","column"],"sources":["/Users/danielkusmider/Library/CloudStorage/OneDrive-Personal/Docs/Projects/ScrapYard/scrap_yard_vue/src/views/dashboard/ItemStatistics.vue"],"sourcesContent":["<template>\n    <div class=\"page-items-stats\">\n        <nav class=\"breadcrumb\" aria-label=\"breadcrumbs\">\n            <ul>\n                <li><router-link to=\"/dashboard\">Dashboard</router-link></li>\n                <li><router-link to=\"/dashboard/items\">Produkty</router-link></li>\n                <li class=\"is-active\"><router-link to=\"/dashboard/items/stats\" aria-current=\"true\">Statystyki produktów</router-link></li>\n            </ul>\n        </nav>\n\n        <div class=\"columns is-multiline\">\n            <div class=\"column is-12\">\n                <h1 class=\"title\">Statystyki produktów</h1>\n\n                <div class=\"column is-3\">\n                    <div class=\"field\">\n                        <label class=\"label\">Zakres od:</label>\n\n                        <div class=\"control\">\n                            <input type=\"date\" name=\"receipt_date\" class=\"input\" v-model=\"dateFrom\" @change=\"dateChange\">\n                        </div>\n                    </div>\n                    <div class=\"field\">\n                        <label class=\"label\">Zakres do:</label>\n\n                        <div class=\"control\">\n                            <input type=\"date\" name=\"receipt_date\" class=\"input\" v-model=\"dateTo\" @change=\"dateChange\">\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"column is-12 table-container\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th @click=\"sortBy('item_code')\"><div style=\"width: 100px;\">Kod odpadu</div></th>\n                                <th @click=\"sortBy('name')\"><div style=\"width: 200px;\">Produkt</div></th>\n                                <th @click=\"sortBy('quantity')\"><div class=\"has-text-right\" style=\"width: 100px;\">Ilość</div></th>\n                                <th @click=\"sortBy('gross_amount')\"><div class=\"has-text-right\" style=\"width: 120px;\">Wypłacono</div></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr v-for=\"(group, index) in groupedItems\" :key=\"index\">\n                                <td colspan=\"4\">{{ group.item_code }}</td>\n                                <tr v-for=\"item in group.items\" :key=\"item.id\">\n                                    <td>{{ item.name }}</td>\n                                    <td>{{ item.item_code }}</td>\n                                    <td class=\"has-text-right\">{{ item.quantity }} kg</td>\n                                    <td class=\"has-text-right\">{{ item.gross_amount }} zł</td>\n                                </tr>\n                            </tr>\n                            \n                        </tbody>\n                    </table>\n                </div>\n\n                <!-- <div class=\"column is-6\">\n                    <StatsChart :sortedItems=\"sortedItems\" />\n                </div> -->\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { toast } from 'bulma-toast'\nimport StatsChart from '@/components/StatsChart.vue';\n\nexport default {\n    name: 'ItemStatistics',\n    data() {\n        return {\n            dateFrom: '',\n            dateTo: '',\n            receipt_items: [],\n            unique_items: [],\n            sortByColumn: null,\n            sortDirection: 'asc'\n        }\n    },\n    components: {\n        StatsChart\n    },\n    mounted() {\n        this.getReceiptItems(),\n        this.setWeekRange(),\n        this.sortBy('name')\n    },\n    computed: {\n        sortedItems() {\n            // Create a copy of the items array to avoid mutating the original data\n            let sortedItems = [...this.unique_items];\n\n            // Sort the items based on the selected column and direction\n            if (this.sortByColumn) {\n                sortedItems.sort((a, b) => {\n                const valA = a[this.sortByColumn];\n                const valB = b[this.sortByColumn];\n                if (valA < valB) return this.sortDirection === 'asc' ? -1 : 1;\n                if (valA > valB) return this.sortDirection === 'asc' ? 1 : -1;\n                return 0;\n                });\n            }\n\n            return sortedItems;\n        },\n        groupedItems() {\n            const groupedItemsMap = {};\n\n            this.sortedItems.forEach(item => {\n            const { item_code } = item;\n\n            if (!groupedItemsMap[item_code]) {\n                groupedItemsMap[item_code] = [];\n            }\n\n            groupedItemsMap[item_code].push(item);\n            });\n\n            // Convert object to array of grouped items\n            return Object.entries(groupedItemsMap).map(([itemCode, items]) => ({\n                item_code: itemCode,\n                items\n            }));\n        }\n    },\n    methods: {\n        getReceiptItems() {\n            axios\n                .get('/api/v1/receipts/')\n                .then(response => {\n                    console.log(response)\n                    for (let i = 0; i < response.data.length; i++) {\n                        if (response.data[i].date >= this.dateFrom && response.data[i].date <= this.dateTo) {\n                            for (let x = 0; x < response.data[i].receipt_items.length; x++) {\n                                this.receipt_items.push(response.data[i].receipt_items[x])\n                            }\n                        }\n                    }\n                    this.calculateItems()\n                })\n                .catch(error => {\n                    console.log(JSON.stringify(error))\n                })\n        },\n        calculateItems() {\n            // Initialize an object to store unique items\n            const uniqueItemsMap = {};\n\n            this.receipt_items.forEach(item => {\n                const { source_id, name, item_code, quantity, gross_amount } = item;\n                \n                // Convert gross_amount to a number\n                const grossAmountNumber = parseFloat(gross_amount);\n                \n                if (uniqueItemsMap[source_id]) {\n                    // If item exists, update quantity and gross_value\n                    uniqueItemsMap[source_id].name = name;\n                    uniqueItemsMap[source_id].item_code = item_code;\n                    uniqueItemsMap[source_id].quantity += quantity;\n                    uniqueItemsMap[source_id].gross_amount += grossAmountNumber;\n                } else {\n                    // If item does not exist, create new entry\n                    uniqueItemsMap[source_id] = {\n                        source_id,\n                        name,\n                        item_code,\n                        quantity,\n                        gross_amount: grossAmountNumber\n                    };\n                }\n            });\n            \n            // Convert object to array of unique items\n            this.unique_items = Object.values(uniqueItemsMap);\n        },\n        async dateChange() {\n            await this.getReceiptItems()\n            await this.calculateItems\n        },\n        setWeekRange() {\n            const currentDate = new Date();\n            const firstDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay()+1));\n            const lastDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 7));\n            \n            // Format dates as YYYY-MM-DD strings\n            const formattedFirstDay = firstDayOfWeek.toISOString().split('T')[0];\n            const formattedLastDay = lastDayOfWeek.toISOString().split('T')[0];\n            \n            // Set the data properties\n            this.dateFrom = formattedFirstDay;\n            this.dateTo = formattedLastDay;\n        },\n        sortBy(column) {\n            // Toggle sort direction if the same column header is clicked\n            if (this.sortByColumn === column) {\n                this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n            } else {\n                // Otherwise, set the column to sort by and reset sort direction\n                this.sortByColumn = column;\n                this.sortDirection = 'asc';\n            }\n        }\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}